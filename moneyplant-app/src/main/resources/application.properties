spring.application.name=moneyplant-app
server.host=0.0.0.0
server.port=8080
logging.level.root=info

# Database Configuration
spring.datasource.url=jdbc:postgresql://postgres.tailce422e.ts.net:5432/MoneyPlant
spring.datasource.username=postgres
spring.datasource.password=mysecretpassword
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Connection Pool Configuration
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.pool-name=MoneyPlantHikariPool
spring.datasource.hikari.initialization-fail-timeout=10000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.auto-commit=false

# JPA/Hibernate Configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Allow application to start even if a database is not available
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.sql.init.mode=always
spring.sql.init.continue-on-error=true

# OpenAPI Swagger Documentation
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v1/api-docs
openapi.service.title=MoneyPlant API
openapi.service.description=REST API Documentation for MoneyPlant Application
openapi.service.version=1.0.0

# Service-specific OpenAPI titles and descriptions
# These are used by the OpenApiConfig class in each service context
# The main application uses openapi.service.* properties
# When running in the context of a specific service, Spring will use these properties:
openapi.service.stock-service.title=Stock Service
openapi.service.stock-service.description=REST API Documentation for Stock Service
openapi.service.portfolio-service.title=Portfolio Service
openapi.service.portfolio-service.description=REST API Documentation for Portfolio Service
openapi.service.transaction-service.title=Transaction Service
openapi.service.transaction-service.description=REST API Documentation for Transaction Service
openapi.service.watchlist-service.title=Watchlist Service
openapi.service.watchlist-service.description=REST API Documentation for Watchlist Service

# Management Endpoints
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.db.enabled=true
management.health.diskspace.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Disable health checks that aren't needed
management.health.rabbit.enabled=false

# Disable caching for static resources
spring.web.resources.cache.period=0
spring.web.resources.chain.cache=false

# Apache Trino Configuration
trino.url=${TRINO_URL:jdbc:trino://trino.tailce422e.ts.net:8080}
trino.catalog=${TRINO_CATALOG:}
trino.schema=${TRINO_SCHEMA:}
trino.user=${TRINO_USER:'trino'}
trino.password=${TRINO_PASSWORD:''}
trino.ssl.enabled=${TRINO_SSL_ENABLED:false}

trino.catalog.management=dynamic
trino.sql.default-function-catalog=postgresql
trino.sql.default-function-schema=public

# PostgreSQL Catalog Configuration for Trino
# These properties are used by Trino server to connect to PostgreSQL
# Note: These must be configured on the Trino server side as well
trino.postgresql.host=${TRINO_PG_HOST:postgres.tailce422e.ts.net}
trino.postgresql.port=${TRINO_PG_PORT:5432}
trino.postgresql.database=${TRINO_PG_DATABASE:MoneyPlant}
trino.postgresql.user=${TRINO_PG_USER:postgres}
trino.postgresql.password=${TRINO_PG_PASSWORD:mysecretpassword}
