{"version":3,"file":"superset-integration.mjs","sources":["../../../projects/superset-integration/src/lib/widgets/superset/superset.component.ts","../../../projects/superset-integration/src/public-api.ts","../../../projects/superset-integration/src/superset-integration.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy, ElementRef, ChangeDetectionStrategy, AfterViewInit, Input, EventEmitter, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISupersetOptions } from '../../entities/ISupersetOptions';\nimport { embedDashboard } from '@superset-ui/embedded-sdk';\n\n// Define the IWidget interface directly\nexport interface IWidget {\n  id?: string;\n  position: any;\n  config: {\n    component?: string;\n    header?: {\n      title: string;\n      options?: string[];\n    };\n    options: any;\n  };\n  loading?: boolean;\n  error?: any;\n}\n\n// Define a simplified EventBusService\nexport class EventBusService {\n  onWidgetUpdate(): any {\n    return new Subject<IWidget>().asObservable();\n  }\n\n  onFilterUpdate(): any {\n    return new Subject<any>().asObservable();\n  }\n\n  publishError(error: any, source?: string): void {\n    console.error(`Error in widget ${source}:`, error);\n  }\n}\n\n/**\n * Component for displaying Superset dashboards\n */\n@Component({\n  selector: 'vis-superset',\n  standalone: true,\n  template: `<div class=\"superset-container\" #supersetContainer></div>`,\n  styles: [`\n    .superset-container {\n      width: 100%;\n      height: 100%;\n      overflow: auto;\n    }\n  `],\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SupersetComponent implements OnInit, OnDestroy, AfterViewInit {\n  /** The widget configuration */\n  @Input() widget!: IWidget;\n\n  /** Event emitted when data needs to be loaded for the widget */\n  @Input() onDataLoad!: EventEmitter<IWidget>;\n\n  /** Event emitted when filter values are updated */\n  @Input() onUpdateFilter!: EventEmitter<any>;\n\n  /** Subject for handling component destruction */\n  protected destroy$ = new Subject<void>();\n\n  /** Loading state of the widget */\n  protected loading = false;\n\n  /** Error state of the widget */\n  protected error: any = null;\n\n  /** Event bus service */\n  protected eventBus: EventBusService;\n\n  /** Reference to the container element */\n  private container: HTMLElement | null = null;\n\n  /** The embedded dashboard instance */\n  private embeddedDashboard: any = null;\n\n  constructor(\n    private elementRef: ElementRef\n  ) {\n    this.eventBus = new EventBusService();\n  }\n\n  /**\n   * Initialize the component\n   */\n  ngOnInit(): void {\n    // Subscribe to relevant events\n    this.subscribeToEvents();\n  }\n\n  /**\n   * After view initialization, get the container element and initialize the dashboard\n   */\n  ngAfterViewInit(): void {\n    this.container = this.elementRef.nativeElement.querySelector('.superset-container');\n    this.initializeDashboard();\n  }\n\n  /**\n   * Clean up resources when the component is destroyed\n   */\n  ngOnDestroy(): void {\n    // Clean up the embedded dashboard if it exists\n    if (this.embeddedDashboard) {\n      // The SDK might provide a destroy method in the future\n      this.embeddedDashboard = null;\n    }\n\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n   * Subscribes to relevant events from the event bus\n   */\n  protected subscribeToEvents(): void {\n    // Subscribe to widget update events for this widget\n    this.eventBus.onWidgetUpdate()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((updatedWidget: IWidget) => {\n        if (updatedWidget.id === this.widget.id) {\n          this.widget = updatedWidget;\n          this.onWidgetUpdated();\n        }\n      });\n\n    // Subscribe to filter update events\n    this.eventBus.onFilterUpdate()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((filterData: any) => {\n        this.onFilterUpdated(filterData);\n      });\n  }\n\n  /**\n   * Handles errors that occur during data loading\n   * \n   * @param error - The error that occurred\n   */\n  protected handleError(error: any): void {\n    this.error = error;\n    this.loading = false;\n    this.eventBus.publishError(error, this.widget.id);\n    console.error(`Error in widget ${this.widget.id}:`, error);\n  }\n\n  /**\n   * Called when filters are updated\n   * Override in derived classes to handle filter updates\n   * \n   * @param filterData - The updated filter data\n   */\n  protected onFilterUpdated(filterData: any): void {\n    // No-op by default\n  }\n\n  /**\n   * Initialize the Superset dashboard\n   */\n  private initializeDashboard(): void {\n    if (!this.container) {\n      console.error('Superset container element not found');\n      return;\n    }\n\n    const options = this.widget.config.options as ISupersetOptions;\n\n    if (!options.dashboardUrl || !options.dashboardId) {\n      console.error('Missing required Superset options: dashboardUrl or dashboardId');\n      return;\n    }\n\n    this.loading = true;\n\n    try {\n      // Embed the dashboard using the Superset SDK\n      embedDashboard({\n        id: options.dashboardId,\n        supersetDomain: options.dashboardUrl,\n        mountPoint: this.container,\n        fetchGuestToken: () => {\n          // If a guest token is provided, use it\n          if (options.guestToken) {\n            return Promise.resolve(options.guestToken);\n          }\n\n          // Otherwise, you would typically fetch it from your backend\n          // For now, we'll just return an error\n          return Promise.reject('No guest token provided');\n        },\n        dashboardUiConfig: {\n          hideTitle: options.config?.showHeader === false,\n          hideChartControls: true,\n          hideTab: false,\n        }\n      })\n      .then(dashboard => {\n        this.embeddedDashboard = dashboard;\n        this.loading = false;\n      })\n      .catch(error => {\n        this.handleError(error);\n      });\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  /**\n   * Called when the widget is updated\n   */\n  protected onWidgetUpdated(): void {\n    // Reinitialize the dashboard if the widget is updated\n    this.initializeDashboard();\n  }\n}\n","/*\n * Public API Surface of superset-integration\n */\n\n// Entities\nexport * from './lib/entities/ISupersetOptions';\n\n// Widgets\nexport * from './lib/widgets/superset/superset.component';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}