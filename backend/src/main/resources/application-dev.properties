spring.application.name=moneyplant-app
server.host=0.0.0.0
server.port=8080
logging.level.root=info

# Database Configuration
spring.datasource.url=jdbc:postgresql://${DB_HOST:postgres.tailce422e.ts.net}:${DB_PORT:5432}/${DB_NAME:MoneyPlant}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Connection Pool Configuration
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.pool-name=MoneyPlantHikariPool
spring.datasource.hikari.initialization-fail-timeout=10000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.auto-commit=false

# JPA/Hibernate Configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Allow application to start even if a database is not available
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.sql.init.mode=always
spring.sql.init.continue-on-error=true

# OpenAPI Swagger Documentation
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v1/api-docs
openapi.service.title=MoneyPlant API
openapi.service.description=REST API Documentation for MoneyPlant Application
openapi.service.version=1.0.0

# Service-specific OpenAPI titles and descriptions
openapi.service.stock-service.title=Stock Service
openapi.service.stock-service.description=REST API Documentation for Stock Service
openapi.service.portfolio-service.title=Portfolio Service
openapi.service.portfolio-service.description=REST API Documentation for Portfolio Service
openapi.service.transaction-service.title=Transaction Service
openapi.service.transaction-service.description=REST API Documentation for Transaction Service
openapi.service.watchlist-service.title=Watchlist Service
openapi.service.watchlist-service.description=REST API Documentation for Watchlist Service

# Management Endpoints
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.db.enabled=true
management.health.diskspace.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Disable health checks that aren't needed
management.health.rabbit.enabled=false

# CORS Configuration for Development
spring.web.cors.allowed-origins=http://localhost:4200,http://127.0.0.1:4200
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# JWT Configuration
# JWT secret is loaded from environment variables via .env file
jwt.secret=${JWT_SECRET}
jwt.expiration=32400000
jwt.refresh-expiration=86400000

# OAuth2 Configuration - Use environment variables for security
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.google.client-name=Google

spring.security.oauth2.client.registration.microsoft.client-id=${MICROSOFT_CLIENT_ID:}
spring.security.oauth2.client.registration.microsoft.client-secret=${MICROSOFT_CLIENT_SECRET:}
spring.security.oauth2.client.registration.microsoft.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.microsoft.scope=openid,profile,email
spring.security.oauth2.client.registration.microsoft.redirect-uri=http://localhost:8080/login/oauth2/code/microsoft
spring.security.oauth2.client.registration.microsoft.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.microsoft.client-name=Microsoft

# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

spring.security.oauth2.client.provider.microsoft.authorization-uri=https://login.microsoftonline.com/common/oauth2/v2.0/authorize
spring.security.oauth2.client.provider.microsoft.token-uri=https://login.microsoftonline.com/common/oauth2/v2.0/token
spring.security.oauth2.client.provider.microsoft.user-info-uri=https://graph.microsoft.com/oidc/userinfo
spring.security.oauth2.client.provider.microsoft.user-name-attribute=sub
spring.security.oauth2.client.provider.microsoft.jwk-set-uri=https://login.microsoftonline.com/common/discovery/v2.0/keys

# Apache Trino Configuration
trino.url=${TRINO_URL:jdbc:trino://trino.tailce422e.ts.net:8080}
trino.catalog=${TRINO_CATALOG:}
trino.schema=${TRINO_SCHEMA:}
trino.user=${TRINO_USER:'trino'}
trino.password=${TRINO_PASSWORD:''}
trino.ssl.enabled=${TRINO_SSL_ENABLED:false}

trino.catalog.management=dynamic
trino.sql.default-function-catalog=postgresql
trino.sql.default-function-schema=public

# PostgreSQL Catalog Configuration for Trino
trino.postgresql.host=${TRINO_PG_HOST:postgres.tailce422e.ts.net}
trino.postgresql.port=${TRINO_PG_PORT:5432}
trino.postgresql.database=${TRINO_PG_DATABASE:MoneyPlant}
trino.postgresql.user=${TRINO_PG_USER:postgres}
trino.postgresql.password=${TRINO_PG_PASSWORD:} 

# Development configuration - enable DDL auto-update to create tables
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Enable database health check for development
management.health.db.enabled=true

# WebSocket testing configuration - REMOVED: All WebSockets moved to engines project 